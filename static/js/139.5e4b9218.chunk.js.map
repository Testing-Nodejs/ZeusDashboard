{"version":3,"sources":["services/service.js","views/Reports/TrackEmployee.js"],"names":["MyApiUrl","ViewImg","TrackEmployee","props","EmpID","location","state","data","i","MDate","useState","path","setPath","centre","setcentre","Endposition","setEndposition","displaygrp","setdisplaygrp","React","useEffect","GetEmployeeLocation","history","useHistory","splitval","split","axios","method","url","headers","then","response","length","parseInt","catch","error","console","log","polylineRef","useRef","listenersRef","onEdit","useCallback","current","nextPath","getPath","getArray","map","latLng","toJSON","onLoad","polyline","push","addListener","onUnmount","forEach","lis","remove","useLoadScript","googleMapsApiKey","isLoaded","loadError","id","style","marginTop","md","boxShadow","color","size","onClick","goBack","mapContainerStyle","width","height","zoom","center","ref","options","strokeColor","onMouseUp","position","title","label","icon","fontSize","fontWeight","textAlign"],"mappings":"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","file":"static/js/139.5e4b9218.chunk.js","sourcesContent":["// Nodejs Api's\r\n// Local\r\n//  const MyApiUrl = 'http://192.168.1.7:7765/api/';\r\n\r\n//  const ViewImg = 'http://192.168.1.7:7765/';\r\n\r\n// Live\r\n // const MyApiUrl = 'https://ssieducation.in:7765/api/';\r\n\r\n  //const ViewImg = 'https://ssieducation.in:7765/'; \r\n\r\n  const MyApiUrl = 'https://zeusservices.onrender.com/api/';\r\n\r\n  const ViewImg = 'https://zeusservices.onrender.com/'; \r\n\r\nexport {\r\n    MyApiUrl,\r\n    ViewImg,\r\n}\r\n","/**\r\n * @author KIMOSABE\r\n * @email Kimosabe@mail.com\r\n * @create date 2021-11-25 17:00:15\r\n * @modify date 2021-12-06 15:32:46\r\n * @desc [description]\r\n */\r\n\r\nimport React, { Fragment, useCallback, useRef, useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CRow,\r\n  CButton,\r\n} from \"@coreui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { GoogleMap, Polyline, useLoadScript, Marker } from \"@react-google-maps/api\";\r\nimport axios from \"axios\";\r\nimport { MyApiUrl } from \"src/services/service\";\r\nimport \"../../style.css\";\r\nimport { FormatColorResetOutlined } from \"@material-ui/icons\";\r\n\r\n\r\nconst TrackEmployee = (props) => {\r\n  const EmpID = props.location.state.data.i.EmpID;\r\n  const MDate = props.location.state.data.i.MDate;\r\n\r\n  const LoginImage = \"avatars/LoginIcon.png\";\r\n  const LogoutImage = \"avatars/LogoutIcon.png\";\r\n\r\n  const [path, setPath] = useState();\r\n  const [centre, setcentre] = useState({});\r\n  const [Endposition, setEndposition] = useState({});\r\n  const [displaygrp, setdisplaygrp] = useState(false);\r\n\r\n  React.useEffect(() => {\r\n    GetEmployeeLocation();\r\n  }, []);\r\n\r\n  let history = useHistory();\r\n\r\n  const GetEmployeeLocation = () => {\r\n    let splitval = MDate.split(\"T\");\r\n    axios({\r\n      method: \"GET\",\r\n      url: MyApiUrl + \"GetEmployeeLocationsByDate/\" + EmpID + \"/\" + splitval[0],\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.data.length === 0) {\r\n          setdisplaygrp(false);\r\n        } else {\r\n          setdisplaygrp(true);\r\n          setPath(response.data);\r\n          setcentre(response.data[0]);\r\n          setEndposition(response.data[(parseInt(response.data.length) - 1)]);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const polylineRef = useRef(null);\r\n  const listenersRef = useRef([]);\r\n\r\n  const onEdit = useCallback(() => {\r\n    if (polylineRef.current) {\r\n      const nextPath = polylineRef.current\r\n        .getPath()\r\n        .getArray()\r\n        .map((latLng) => latLng.toJSON());\r\n      setPath(nextPath);\r\n    }\r\n  }, [setPath]);\r\n\r\n  const onLoad = useCallback(\r\n    (polyline) => {\r\n      polylineRef.current = polyline;\r\n      const path = polyline.getPath();\r\n      listenersRef.current.push(\r\n        path.addListener(\"set_at\", onEdit),\r\n        path.addListener(\"insert_at\", onEdit),\r\n        path.addListener(\"remove_at\", onEdit)\r\n      );\r\n    },\r\n    [onEdit]\r\n  );\r\n\r\n  const onUnmount = useCallback(() => {\r\n    listenersRef.current.forEach((lis) => lis.remove());\r\n    polylineRef.current = null;\r\n  }, []);\r\n\r\n  const mapContainerStyle = {\r\n    width: \"100%\",\r\n    height: \"80vh\"\r\n  };\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: \"\"\r\n  });\r\n\r\n  if (loadError) return \"Error loading Google Map\";\r\n  if (!isLoaded) return \"Loading Maps....\";\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"divLoading\"> </div>\r\n      <h1 id=\"ccmaster\">Track Employee</h1>\r\n      <CRow style={{ marginTop: \"3%\" }}>\r\n        <CCol md=\"2\" />\r\n        <CCol md=\"12\">\r\n          <CCard style={{ boxShadow: \"0px 0px 1px 1px #959595\" }}>\r\n            <CCardBody>\r\n              <CRow>\r\n                <CCol md=\"1\">\r\n                  <CButton\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    onClick={() => history.goBack()}\r\n                  >\r\n                    Back\r\n                  </CButton>\r\n                </CCol>\r\n              </CRow>\r\n              <br />\r\n              <CRow>\r\n                <CCol>\r\n                  <CCard>\r\n                    <CCardHeader>Track Employee</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow>\r\n                        <CCol md=\"12\">\r\n                          {displaygrp === true ?\r\n                            <Fragment>\r\n                              <GoogleMap\r\n                                mapContainerStyle={mapContainerStyle}\r\n                                zoom={18}\r\n                                center={centre}\r\n                              >\r\n                                <Polyline\r\n                                  ref={polylineRef}\r\n                                  path={path}\r\n                                  options={{ strokeColor: \"#ff0000\" }}\r\n                                  onMouseUp={onEdit}\r\n                                  onLoad={onLoad}\r\n                                  onUnmount={onUnmount}\r\n                                />\r\n                                <Marker\r\n                                  position={centre}\r\n                                  title={\"Login..! Work Started From Here.\"}\r\n                                  label={\"Login\"}\r\n                                  icon={LoginImage}\r\n                                />\r\n                                <Marker\r\n                                  position={Endposition}\r\n                                  title={\"Logout..! Work Ended Here.\"}\r\n                                  icon={LogoutImage}\r\n                                />\r\n\r\n                              </GoogleMap>\r\n                            </Fragment > :\r\n                            <Fragment>\r\n                              <p style={{fontSize: \"20px\",fontWeight: \"900\",textAlign: \"center\"}}>No Data To Display ...!</p></Fragment>\r\n                          }\r\n\r\n                        </CCol>\r\n                      </CRow>\r\n\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol md=\"2\" />\r\n      </CRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrackEmployee;\r\n"],"sourceRoot":""}